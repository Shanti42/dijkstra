// CAITLIN

package dijkstra;

import java.util.Objects;
import java.util.Set;

public final class PathNode implements Comparable<PathNode> {

    private final Node node;
    private final Cost cost;

    //Null previous denotes that this node is the original departure node
    private final PathNode previous;

    private PathNode(Node node, Cost cost, PathNode previous) {
        this.node = node;
        this.cost = cost;
        this.previous = previous;
    }

    public static final PathNode of(Node node, Cost cost, PathNode previous) {
        Objects.requireNonNull(node, "Received null node");
        Objects.requireNonNull(cost, "Received null cost");
        //Previous node can be null, so no null check

        return new PathNode(node, cost, previous);
    }

    public static final PathNode of(Connection connection, PathNode previous) {
        Objects.requireNonNull(connection, "connection received null");
        Objects.requireNonNull(previous, "previous node received is null");
        assert (connection.origin().equals(previous.node));

        return new PathNode(connection.destination(), connection.cost(), previous);
    }

    public static final PathNode of(Node node) {
        Objects.requireNonNull(node, "received null node");

        return new PathNode(node, Cost.UNKNOWN, null);

    }

    public static final PathNode of(Node node, Cost cost) {
        Objects.requireNonNull(node, "received null node");

        return new PathNode(node, cost, null);

    }

    public Node getNode() {
        return node;
    }

    public Cost getCost() {
        return cost;
    }

    public Cost getTotalCost() {
        if(previous == null) {
            return this.getCost();
        }
        return cost.plus(previous.getTotalCost());
    }

    public final PathNode getPrevious() {
        return previous;
    }

    // MIGHT NEED TO CHANGE THIS ASK ELLIS (COST, SEE NODE)
    final Set<Connection> availableConnections() {
        assert (isKnown());
        return node.availableConnections();
    }

    final Set<Connection> availableConnections(ConnectionType connectionType) {
        assert (isKnown());
        Objects.requireNonNull(connectionType, "PathNode, availableConnections() -> Null parameter for connectionType");
        return node.availableConnections(cost, connectionType);
    }

    public final boolean isKnown() {
        return cost.isKnown();
    }

    @Override
    public int compareTo(PathNode other) {
        Objects.requireNonNull(other, "PathNode, compareTo() -> Null parameter for other PathNode");
        Cost otherCost = other.getCost();
        if (this.getCost().equals(otherCost)) {
            return this.getNode().compareTo(other.getNode());
        } else {
            return this.getCost().compareTo(otherCost);
        }
    }

    // DOUBLE CHECK WITH ELLIS: if autogenerated, complexity?????
    /*
    * AUTO GENERATED BY INTELLIJ
    * */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PathNode pathNode = (PathNode) o;
        return node.equals(pathNode.node) &&
                Objects.equals(cost, pathNode.cost) &&
                Objects.equals(previous, pathNode.previous);
    }

}
